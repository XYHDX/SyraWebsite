
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for Admin role
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }
    
    // Helper function to check for Coach role
    function isCoach() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Coach';
    }

    // Users can only be read by themselves or by an admin.
    // Anyone authenticated can create their own user document.
    match /users/{userId} {
      allow read: if request.auth.uid == userId || isAdmin();
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId; // Allow users to update their own profile
      allow delete: if isAdmin(); // Only admins can delete users
    }

    // Schools can be read by any authenticated user, but only modified by admins.
    match /schools/{schoolId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // Competitions can be read by any authenticated user.
    // Only admins can create, update, or delete competitions.
    match /competitions/{competitionId} {
        allow read: if request.auth != null;
        allow write: if isAdmin();
    }

    // Posts can be read by any authenticated user if they are 'Approved'.
    // Users can create posts, but not update them (updates happen via admin approval).
    // Users can only delete their own posts if they are still 'Pending'.
    // Admins can approve (update) or delete any post.
    match /posts/{postId} {
      allow read: if request.auth != null && resource.data.status == 'Approved';
      allow create: if request.auth.uid == request.resource.data.authorId;
      
      // Allow admin to update (e.g., approve)
      // Allow user to update only if it's their own post and it's pending. (Future use case)
      allow update: if isAdmin(); 

      // Allow admin to delete any post.
      // Allow author to delete their own post only if status is 'Pending'.
      allow delete: if isAdmin() || (request.auth.uid == resource.data.authorId && resource.data.status == 'Pending');

      // Likes can be created/deleted by any authenticated user.
      match /likes/{userId} {
        allow read, write: if request.auth.uid == userId;
      }
    }
  }
}
